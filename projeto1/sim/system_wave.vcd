$date
	Tue Oct  7 11:04:43 2025
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module test_system $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var reg 1 # u $end
$var reg 1 $ d $end
$var wire 1 % c_out [15] $end
$var wire 1 & c_out [14] $end
$var wire 1 ' c_out [13] $end
$var wire 1 ( c_out [12] $end
$var wire 1 ) c_out [11] $end
$var wire 1 * c_out [10] $end
$var wire 1 + c_out [9] $end
$var wire 1 , c_out [8] $end
$var wire 1 - c_out [7] $end
$var wire 1 . c_out [6] $end
$var wire 1 / c_out [5] $end
$var wire 1 0 c_out [4] $end
$var wire 1 1 c_out [3] $end
$var wire 1 2 c_out [2] $end
$var wire 1 3 c_out [1] $end
$var wire 1 4 c_out [0] $end
$var wire 1 5 current_state [2] $end
$var wire 1 6 current_state [1] $end
$var wire 1 7 current_state [0] $end
$var wire 1 8 op $end
$var wire 1 9 c_ld $end
$var wire 1 : c_clr $end
$var wire 1 ; z $end
$var wire 1 < m $end

$scope module dut $end
$var wire 1 = clk $end
$var wire 1 > reset $end
$var wire 1 ? u $end
$var wire 1 @ d $end
$var wire 1 % c_out [15] $end
$var wire 1 & c_out [14] $end
$var wire 1 ' c_out [13] $end
$var wire 1 ( c_out [12] $end
$var wire 1 ) c_out [11] $end
$var wire 1 * c_out [10] $end
$var wire 1 + c_out [9] $end
$var wire 1 , c_out [8] $end
$var wire 1 - c_out [7] $end
$var wire 1 . c_out [6] $end
$var wire 1 / c_out [5] $end
$var wire 1 0 c_out [4] $end
$var wire 1 1 c_out [3] $end
$var wire 1 2 c_out [2] $end
$var wire 1 3 c_out [1] $end
$var wire 1 4 c_out [0] $end
$var wire 1 A op $end
$var wire 1 B c_ld $end
$var wire 1 C c_clr $end
$var wire 1 D z $end
$var wire 1 E m $end

$scope module fsm $end
$var parameter 3 F INICIO $end
$var parameter 3 G ESPERA $end
$var parameter 3 H VERIFICA $end
$var parameter 3 I INC $end
$var parameter 3 J ESPERA_INC $end
$var parameter 3 K DEC $end
$var parameter 3 L ESPERA_DEC $end
$var wire 1 = clk $end
$var wire 1 > reset $end
$var wire 1 ? u $end
$var wire 1 @ d $end
$var wire 1 D z $end
$var wire 1 E m $end
$var reg 1 M op $end
$var reg 1 N c_clr $end
$var reg 1 O c_ld $end
$var reg 3 P current_state [2:0] $end
$var reg 3 Q next_state [2:0] $end
$upscope $end

$scope module dp $end
$var wire 1 = clk $end
$var wire 1 > reset $end
$var wire 1 A op $end
$var wire 1 B c_ld $end
$var wire 1 C c_clr $end
$var wire 1 D z $end
$var wire 1 E m $end
$var wire 1 % c_out [15] $end
$var wire 1 & c_out [14] $end
$var wire 1 ' c_out [13] $end
$var wire 1 ( c_out [12] $end
$var wire 1 ) c_out [11] $end
$var wire 1 * c_out [10] $end
$var wire 1 + c_out [9] $end
$var wire 1 , c_out [8] $end
$var wire 1 - c_out [7] $end
$var wire 1 . c_out [6] $end
$var wire 1 / c_out [5] $end
$var wire 1 0 c_out [4] $end
$var wire 1 1 c_out [3] $end
$var wire 1 2 c_out [2] $end
$var wire 1 3 c_out [1] $end
$var wire 1 4 c_out [0] $end
$var wire 1 R current_c [15] $end
$var wire 1 S current_c [14] $end
$var wire 1 T current_c [13] $end
$var wire 1 U current_c [12] $end
$var wire 1 V current_c [11] $end
$var wire 1 W current_c [10] $end
$var wire 1 X current_c [9] $end
$var wire 1 Y current_c [8] $end
$var wire 1 Z current_c [7] $end
$var wire 1 [ current_c [6] $end
$var wire 1 \ current_c [5] $end
$var wire 1 ] current_c [4] $end
$var wire 1 ^ current_c [3] $end
$var wire 1 _ current_c [2] $end
$var wire 1 ` current_c [1] $end
$var wire 1 a current_c [0] $end
$var wire 1 b next_c [15] $end
$var wire 1 c next_c [14] $end
$var wire 1 d next_c [13] $end
$var wire 1 e next_c [12] $end
$var wire 1 f next_c [11] $end
$var wire 1 g next_c [10] $end
$var wire 1 h next_c [9] $end
$var wire 1 i next_c [8] $end
$var wire 1 j next_c [7] $end
$var wire 1 k next_c [6] $end
$var wire 1 l next_c [5] $end
$var wire 1 m next_c [4] $end
$var wire 1 n next_c [3] $end
$var wire 1 o next_c [2] $end
$var wire 1 p next_c [1] $end
$var wire 1 q next_c [0] $end
$var wire 1 r cout $end

$scope module reg_c $end
$var wire 1 = clk $end
$var wire 1 > reset $end
$var wire 1 B c_ld $end
$var wire 1 C c_clr $end
$var wire 1 b d_in [15] $end
$var wire 1 c d_in [14] $end
$var wire 1 d d_in [13] $end
$var wire 1 e d_in [12] $end
$var wire 1 f d_in [11] $end
$var wire 1 g d_in [10] $end
$var wire 1 h d_in [9] $end
$var wire 1 i d_in [8] $end
$var wire 1 j d_in [7] $end
$var wire 1 k d_in [6] $end
$var wire 1 l d_in [5] $end
$var wire 1 m d_in [4] $end
$var wire 1 n d_in [3] $end
$var wire 1 o d_in [2] $end
$var wire 1 p d_in [1] $end
$var wire 1 q d_in [0] $end
$var reg 16 s q [15:0] $end
$upscope $end

$scope module alu $end
$var wire 1 R a [15] $end
$var wire 1 S a [14] $end
$var wire 1 T a [13] $end
$var wire 1 U a [12] $end
$var wire 1 V a [11] $end
$var wire 1 W a [10] $end
$var wire 1 X a [9] $end
$var wire 1 Y a [8] $end
$var wire 1 Z a [7] $end
$var wire 1 [ a [6] $end
$var wire 1 \ a [5] $end
$var wire 1 ] a [4] $end
$var wire 1 ^ a [3] $end
$var wire 1 _ a [2] $end
$var wire 1 ` a [1] $end
$var wire 1 a a [0] $end
$var wire 1 t b [15] $end
$var wire 1 u b [14] $end
$var wire 1 v b [13] $end
$var wire 1 w b [12] $end
$var wire 1 x b [11] $end
$var wire 1 y b [10] $end
$var wire 1 z b [9] $end
$var wire 1 { b [8] $end
$var wire 1 | b [7] $end
$var wire 1 } b [6] $end
$var wire 1 ~ b [5] $end
$var wire 1 !! b [4] $end
$var wire 1 "! b [3] $end
$var wire 1 #! b [2] $end
$var wire 1 $! b [1] $end
$var wire 1 %! b [0] $end
$var wire 1 A op $end
$var wire 1 b sum [15] $end
$var wire 1 c sum [14] $end
$var wire 1 d sum [13] $end
$var wire 1 e sum [12] $end
$var wire 1 f sum [11] $end
$var wire 1 g sum [10] $end
$var wire 1 h sum [9] $end
$var wire 1 i sum [8] $end
$var wire 1 j sum [7] $end
$var wire 1 k sum [6] $end
$var wire 1 l sum [5] $end
$var wire 1 m sum [4] $end
$var wire 1 n sum [3] $end
$var wire 1 o sum [2] $end
$var wire 1 p sum [1] $end
$var wire 1 q sum [0] $end
$var wire 1 r cout $end
$var wire 1 &! carry [16] $end
$var wire 1 '! carry [15] $end
$var wire 1 (! carry [14] $end
$var wire 1 )! carry [13] $end
$var wire 1 *! carry [12] $end
$var wire 1 +! carry [11] $end
$var wire 1 ,! carry [10] $end
$var wire 1 -! carry [9] $end
$var wire 1 .! carry [8] $end
$var wire 1 /! carry [7] $end
$var wire 1 0! carry [6] $end
$var wire 1 1! carry [5] $end
$var wire 1 2! carry [4] $end
$var wire 1 3! carry [3] $end
$var wire 1 4! carry [2] $end
$var wire 1 5! carry [1] $end
$var wire 1 6! carry [0] $end

$scope begin adder_chain[15] $end
$var parameter 32 7! i $end

$scope module adder_inst $end
$var wire 1 R a $end
$var wire 1 t b $end
$var wire 1 '! cin $end
$var wire 1 A op $end
$var wire 1 b sum $end
$var wire 1 &! cout $end
$var wire 1 8! b_eff $end
$var wire 1 9! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[14] $end
$var parameter 32 :! i $end

$scope module adder_inst $end
$var wire 1 S a $end
$var wire 1 u b $end
$var wire 1 (! cin $end
$var wire 1 A op $end
$var wire 1 c sum $end
$var wire 1 '! cout $end
$var wire 1 ;! b_eff $end
$var wire 1 <! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[13] $end
$var parameter 32 =! i $end

$scope module adder_inst $end
$var wire 1 T a $end
$var wire 1 v b $end
$var wire 1 )! cin $end
$var wire 1 A op $end
$var wire 1 d sum $end
$var wire 1 (! cout $end
$var wire 1 >! b_eff $end
$var wire 1 ?! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[12] $end
$var parameter 32 @! i $end

$scope module adder_inst $end
$var wire 1 U a $end
$var wire 1 w b $end
$var wire 1 *! cin $end
$var wire 1 A op $end
$var wire 1 e sum $end
$var wire 1 )! cout $end
$var wire 1 A! b_eff $end
$var wire 1 B! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[11] $end
$var parameter 32 C! i $end

$scope module adder_inst $end
$var wire 1 V a $end
$var wire 1 x b $end
$var wire 1 +! cin $end
$var wire 1 A op $end
$var wire 1 f sum $end
$var wire 1 *! cout $end
$var wire 1 D! b_eff $end
$var wire 1 E! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[10] $end
$var parameter 32 F! i $end

$scope module adder_inst $end
$var wire 1 W a $end
$var wire 1 y b $end
$var wire 1 ,! cin $end
$var wire 1 A op $end
$var wire 1 g sum $end
$var wire 1 +! cout $end
$var wire 1 G! b_eff $end
$var wire 1 H! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[9] $end
$var parameter 32 I! i $end

$scope module adder_inst $end
$var wire 1 X a $end
$var wire 1 z b $end
$var wire 1 -! cin $end
$var wire 1 A op $end
$var wire 1 h sum $end
$var wire 1 ,! cout $end
$var wire 1 J! b_eff $end
$var wire 1 K! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[8] $end
$var parameter 32 L! i $end

$scope module adder_inst $end
$var wire 1 Y a $end
$var wire 1 { b $end
$var wire 1 .! cin $end
$var wire 1 A op $end
$var wire 1 i sum $end
$var wire 1 -! cout $end
$var wire 1 M! b_eff $end
$var wire 1 N! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[7] $end
$var parameter 32 O! i $end

$scope module adder_inst $end
$var wire 1 Z a $end
$var wire 1 | b $end
$var wire 1 /! cin $end
$var wire 1 A op $end
$var wire 1 j sum $end
$var wire 1 .! cout $end
$var wire 1 P! b_eff $end
$var wire 1 Q! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[6] $end
$var parameter 32 R! i $end

$scope module adder_inst $end
$var wire 1 [ a $end
$var wire 1 } b $end
$var wire 1 0! cin $end
$var wire 1 A op $end
$var wire 1 k sum $end
$var wire 1 /! cout $end
$var wire 1 S! b_eff $end
$var wire 1 T! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[5] $end
$var parameter 32 U! i $end

$scope module adder_inst $end
$var wire 1 \ a $end
$var wire 1 ~ b $end
$var wire 1 1! cin $end
$var wire 1 A op $end
$var wire 1 l sum $end
$var wire 1 0! cout $end
$var wire 1 V! b_eff $end
$var wire 1 W! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[4] $end
$var parameter 32 X! i $end

$scope module adder_inst $end
$var wire 1 ] a $end
$var wire 1 !! b $end
$var wire 1 2! cin $end
$var wire 1 A op $end
$var wire 1 m sum $end
$var wire 1 1! cout $end
$var wire 1 Y! b_eff $end
$var wire 1 Z! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[3] $end
$var parameter 32 [! i $end

$scope module adder_inst $end
$var wire 1 ^ a $end
$var wire 1 "! b $end
$var wire 1 3! cin $end
$var wire 1 A op $end
$var wire 1 n sum $end
$var wire 1 2! cout $end
$var wire 1 \! b_eff $end
$var wire 1 ]! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[2] $end
$var parameter 32 ^! i $end

$scope module adder_inst $end
$var wire 1 _ a $end
$var wire 1 #! b $end
$var wire 1 4! cin $end
$var wire 1 A op $end
$var wire 1 o sum $end
$var wire 1 3! cout $end
$var wire 1 _! b_eff $end
$var wire 1 `! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[1] $end
$var parameter 32 a! i $end

$scope module adder_inst $end
$var wire 1 ` a $end
$var wire 1 $! b $end
$var wire 1 5! cin $end
$var wire 1 A op $end
$var wire 1 p sum $end
$var wire 1 4! cout $end
$var wire 1 b! b_eff $end
$var wire 1 c! cin_eff $end
$upscope $end
$upscope $end

$scope begin adder_chain[0] $end
$var parameter 32 d! i $end

$scope module adder_inst $end
$var wire 1 a a $end
$var wire 1 %! b $end
$var wire 1 6! cin $end
$var wire 1 A op $end
$var wire 1 q sum $end
$var wire 1 5! cout $end
$var wire 1 e! b_eff $end
$var wire 1 f! cin_eff $end
$upscope $end
$upscope $end
$upscope $end

$scope module comp $end
$var wire 1 R c [15] $end
$var wire 1 S c [14] $end
$var wire 1 T c [13] $end
$var wire 1 U c [12] $end
$var wire 1 V c [11] $end
$var wire 1 W c [10] $end
$var wire 1 X c [9] $end
$var wire 1 Y c [8] $end
$var wire 1 Z c [7] $end
$var wire 1 [ c [6] $end
$var wire 1 \ c [5] $end
$var wire 1 ] c [4] $end
$var wire 1 ^ c [3] $end
$var wire 1 _ c [2] $end
$var wire 1 ` c [1] $end
$var wire 1 a c [0] $end
$var wire 1 D z $end
$var wire 1 E m $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
0#
0$
0M
0N
0O
b0 P
b1 Q
b0 s
b0 F
b1 G
b10 H
b11 I
b100 J
b101 K
b110 L
b0 d!
b1 a!
b10 ^!
b11 [!
b100 X!
b101 U!
b110 R!
b111 O!
b1000 L!
b1001 I!
b1010 F!
b1011 C!
b1100 @!
b1101 =!
b1110 :!
b1111 7!
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
07
06
05
08
09
0:
1;
0<
0A
0B
0C
1D
0E
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
1q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0r
06!
05!
04!
03!
02!
01!
00!
0/!
